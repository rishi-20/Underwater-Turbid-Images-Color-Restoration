{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "edbeeb24",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import cv2\n",
    "\n",
    "class GuidedFilter:\n",
    "    \n",
    "    # def __init__(self, I, radius=5, epsilon=0.4):\n",
    "    def __init__(self, I, radius, epsilon):\n",
    "\n",
    "        self._radius = 2 * radius + 1\n",
    "        self._epsilon = epsilon\n",
    "        self._I = self._toFloatImg(I)\n",
    "        self._initFilter()\n",
    "\n",
    "        # print('radius',self._radius)\n",
    "        # print('epsilon',self._epsilon)\n",
    "\n",
    "    def _toFloatImg(self, img):\n",
    "        if img.dtype == np.float32:\n",
    "            return img\n",
    "        return ( 1.0 / 255.0 ) * np.float32(img)\n",
    "\n",
    "    def _initFilter(self):\n",
    "        I = self._I\n",
    "        r = self._radius\n",
    "        eps = self._epsilon\n",
    "\n",
    "        Ir, Ig, Ib = I[:, :, 0], I[:, :, 1], I[:, :, 2]\n",
    "\n",
    "        # self._Ir_mean = cv2.blur(Ir, (r, r))\n",
    "        # self._Ig_mean = cv2.blur(Ig, (r, r))\n",
    "        # self._Ib_mean = cv2.blur(Ib, (r, r))\n",
    "        #\n",
    "        # Irr_var = cv2.blur(Ir ** 2, (r, r)) - self._Ir_mean ** 2 + eps\n",
    "        # Irg_var = cv2.blur(Ir * Ig, (r, r)) - self._Ir_mean * self._Ig_mean\n",
    "        # Irb_var = cv2.blur(Ir * Ib, (r, r)) - self._Ir_mean * self._Ib_mean\n",
    "        # Igg_var = cv2.blur(Ig * Ig, (r, r)) - self._Ig_mean * self._Ig_mean + eps\n",
    "        # Igb_var = cv2.blur(Ig * Ib, (r, r)) - self._Ig_mean * self._Ib_mean\n",
    "        # Ibb_var = cv2.blur(Ib * Ib, (r, r)) - self._Ib_mean * self._Ib_mean + eps\n",
    "\n",
    "\n",
    "        self._Ir_mean = cv2.blur(Ir, (r, r))\n",
    "        self._Ig_mean = cv2.blur(Ig, (r, r))\n",
    "        self._Ib_mean = cv2.blur(Ib, (r, r))\n",
    "\n",
    "        Irr_var = cv2.blur(Ir ** 2, (r, r)) - self._Ir_mean ** 2 + eps                                       \n",
    "        Irg_var = cv2.blur(Ir * Ig, (r, r)) - self._Ir_mean * self._Ig_mean                                  \n",
    "        Irb_var = cv2.blur(Ir * Ib, (r, r)) - self._Ir_mean * self._Ib_mean                                  \n",
    "        Igg_var = cv2.blur(Ig * Ig, (r, r)) - self._Ig_mean * self._Ig_mean + eps                            \n",
    "        Igb_var = cv2.blur(Ig * Ib, (r, r)) - self._Ig_mean * self._Ib_mean                                  \n",
    "        Ibb_var = cv2.blur(Ib * Ib, (r, r)) - self._Ib_mean * self._Ib_mean + eps                                                       \n",
    "\n",
    "\n",
    "        Irr_inv = Igg_var * Ibb_var - Igb_var * Igb_var                                                      \n",
    "        Irg_inv = Igb_var * Irb_var - Irg_var * Ibb_var                                                      \n",
    "        Irb_inv = Irg_var * Igb_var - Igg_var * Irb_var                                                      \n",
    "        Igg_inv = Irr_var * Ibb_var - Irb_var * Irb_var                                                      \n",
    "        Igb_inv = Irb_var * Irg_var - Irr_var * Igb_var                                                      \n",
    "        Ibb_inv = Irr_var * Igg_var - Irg_var * Irg_var                                                      \n",
    "        \n",
    "        I_cov = Irr_inv * Irr_var + Irg_inv * Irg_var + Irb_inv * Irb_var                                    \n",
    "        Irr_inv /= I_cov                                                                                     \n",
    "        Irg_inv /= I_cov                                                                                     \n",
    "        Irb_inv /= I_cov                                                                                     \n",
    "        Igg_inv /= I_cov                                                                                     \n",
    "        Igb_inv /= I_cov                                                                                     \n",
    "        Ibb_inv /= I_cov                                                                                     \n",
    "        \n",
    "        self._Irr_inv = Irr_inv                                                                              \n",
    "        self._Irg_inv = Irg_inv                                                                              \n",
    "        self._Irb_inv = Irb_inv                                                                              \n",
    "        self._Igg_inv = Igg_inv                                                                              \n",
    "        self._Igb_inv = Igb_inv                                                                              \n",
    "        self._Ibb_inv = Ibb_inv                  \n",
    "\n",
    "    def _computeCoefficients(self, p):\n",
    "        r = self._radius                                                             \n",
    "        I = self._I                                                                 \n",
    "        Ir, Ig, Ib = I[:, :, 0], I[:, :, 1], I[:, :, 2]                                                          \n",
    "        \n",
    "\n",
    "        p_mean = cv2.blur(p, (r, r))                             \n",
    "        Ipr_mean = cv2.blur(Ir * p, (r, r))                                                         \n",
    "        Ipg_mean = cv2.blur(Ig * p, (r, r))                                                    \n",
    "        Ipb_mean = cv2.blur(Ib * p, (r, r))             \n",
    "\n",
    "\n",
    "\n",
    "        Ipr_cov = Ipr_mean - self._Ir_mean * p_mean                                                 \n",
    "        Ipg_cov = Ipg_mean - self._Ig_mean * p_mean                                                     \n",
    "        Ipb_cov = Ipb_mean - self._Ib_mean * p_mean                                                       \n",
    "                                                                                                                 \n",
    "        ar = self._Irr_inv * Ipr_cov + self._Irg_inv * Ipg_cov + self._Irb_inv * Ipb_cov                 \n",
    "        ag = self._Irg_inv * Ipr_cov + self._Igg_inv * Ipg_cov + self._Igb_inv * Ipb_cov                \n",
    "        ab = self._Irb_inv * Ipr_cov + self._Igb_inv * Ipg_cov + self._Ibb_inv * Ipb_cov    \n",
    "\n",
    "        b = p_mean - ar * self._Ir_mean - ag * self._Ig_mean - ab * self._Ib_mean                                                                                                                                         \n",
    "\n",
    "        ar_mean = cv2.blur(ar, (r, r))          \n",
    "        ag_mean = cv2.blur(ag, (r, r))                                                                   \n",
    "        ab_mean = cv2.blur(ab, (r, r))                                                                      \n",
    "        b_mean = cv2.blur(b, (r, r))                                                                                                                                              \n",
    "\n",
    "        return ar_mean, ag_mean, ab_mean, b_mean            \n",
    "\n",
    "    def _computeOutput(self, ab, I):\n",
    "    \n",
    "        ar_mean, ag_mean, ab_mean, b_mean = ab\n",
    "        Ir, Ig, Ib = I[:, :, 0], I[:, :, 1], I[:, :, 2]\n",
    "        q = ar_mean * Ir + ag_mean * Ig + ab_mean * Ib + b_mean\n",
    "        return q\n",
    "\n",
    "    def filter(self, p):\n",
    "\n",
    "        p_32F = self._toFloatImg(p)\n",
    "\n",
    "        ab = self._computeCoefficients(p)\n",
    "        return self._computeOutput(ab, self._I)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
